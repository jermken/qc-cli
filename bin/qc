#!/usr/bin/env node
const program = require('commander')
const fs = require('fs')
const path = require('path')
const logger = require('../lib/util/logger')
const inquirer = require('inquirer')
const { LIBLIST, PACKERLIST} = require('../config/globalConst')

// 定义当前版本
// 定义使用方法
// 定义指令
program
  .version(require('../package').version, '-v, --version')
  .usage('<command> [options]')
  .command('create')
  .description('generate a new project from a template')
  .action((dir, cmd) => {
    const prompt = inquirer.createPromptModule()
    // judge the cwd is a git repository?
    let questions = [{
      type: 'list',
      name: 'lib',
      message: 'select a library for your project',
      choices: LIBLIST
    }, {
      type: 'list',
      name: 'packer',
      message: 'select a packer tool for your project',
      choices: PACKERLIST
    }, {
      type: 'list',
      name: 'typescript',
      message: 'is a typescript project?',
      choices: ['false', 'true']
    }]
    if(!fs.existsSync(path.join(process.cwd(), `/.git`))) {
      questions.unshift({
        type: 'input',
        name: 'name',
        message: 'please input your project name',
        validate:(val) => {
          if(val === '') {
            return 'project name is required'
          } else {
            return true
          }
        }
      })
    }
    prompt(questions).then((data) => {
      data.name = data.name || path.basename(process.cwd())
      require('../commands/create.js')(data)
    }).catch(() => {
      process.exit(1)
    })
  })

program
  .command('dev')
  .description('run a project in development')
  .option('-w, --watch', 'watch for file changes')
  .option('-s, --silent', 'whether to print the build log')
  .action((dir, cmd) => {
    cmd = cmd || {}
    let options = {
      watch: cmd.watch ? process.argv[4] !== 'false' : true,
      silent: cmd.silent && process.argv[4] === 'true'
    }
    require('../commands/dev.js')(dir, options)
  })

program
  .command('build')
  .description('run a project in production')
  .action((dir, cmd) => {
    require('../commands/build.js')(dir, cmd)
  })

let initCommander = process.argv[2]
if(initCommander && !/(create|dev|build|-v|-h|--version|--help)/.test(initCommander)) {
  logger.error(`command:  qc ${initCommander} is not supported`)
  process.exit(1)
}
// 解析命令行参数
program.parse(process.argv)